@page "/1"
@using static TelerikWindowPlay.Data.DataService;
@using Pixata.Extensions
@using System.Collections.ObjectModel

<PageTitle>Layout 1</PageTitle>

<TelerikToolBar Adaptive="false">
  <ToolBarButton OnClick="@(async () => { _customerListWindowVisible = false; await Task.Delay(1); _customerListWindowVisible = true; })">
    <span class="@IconsHelper.Users me-1"></span> Customers
  </ToolBarButton>
  <ToolBarButton OnClick="@(async () => { _charityListWindowVisible = false; await Task.Delay(1); _charityListWindowVisible = true; })">
    <span class="@IconsHelper.HandHoldingHeart me-1"></span> Charities
  </ToolBarButton>
</TelerikToolBar>

<TelerikWindow Visible="@_customerListWindowVisible" Width="450px" ThemeColor="@ThemeConstants.Window.ThemeColor.Primary" Top="60px" Left="30px">
  <WindowActions>
    <WindowAction Name="Close" OnClick="@(() => { _customerListWindowVisible = false; })" />
  </WindowActions>
  <WindowTitle>Customers</WindowTitle>
  <WindowContent>
    <TelerikGrid Data="@_customers"
                 Pageable="true"
                 PageSize="15"
                 OnRowClick="CustomerSelected">
      <GridColumns>
        <TextGridColumn Field="@nameof(CustomerDisplay.FirstName)" Width="200px" />
        <TextGridColumn Field="@nameof(CustomerDisplay.Surname)" Width="200px" />
      </GridColumns>
    </TelerikGrid>
  </WindowContent>
</TelerikWindow>

@foreach (CustomerDisplay c in _customerWindows.Where(c => c.Visible)) {
  <TelerikWindow Visible="true" ThemeColor="@ThemeConstants.Window.ThemeColor.Primary" @bind-Top="@c.TopStr" @bind-Left="@c.LeftStr">
    <WindowActions>
      <WindowAction Name="Close" OnClick="@(() => _customerWindows.Remove(c))" />
    </WindowActions>
    <WindowTitle><span class="@IconsHelper.Users me-1"></span> @c.FirstName @c.Surname</WindowTitle>
    <WindowContent>
      <table>
        <tr>
          <th>Email</th>
          <td>@c.Email</td>
        </tr>
        <tr>
          <th>Address</th>
          <td>@c.Address</td>
        </tr>
        <tr>
          <th>City</th>
          <td>@c.City</td>
        </tr>
        <tr>
          <th>Postcode</th>
          <td>@c.Postcode</td>
        </tr>
      </table>
    </WindowContent>
  </TelerikWindow>
}

<TelerikWindow Visible="@_charityListWindowVisible" Width="550px" ThemeColor="@ThemeConstants.Window.ThemeColor.Dark" Top="120px" Left="100px">
  <WindowActions>
    <WindowAction Name="Close" OnClick="@(() => _charityListWindowVisible = false)" />
  </WindowActions>
  <WindowTitle>Charities</WindowTitle>
  <WindowContent>
    <TelerikGrid Data="@_charities"
                 Pageable="true"
                 PageSize="15"
                 OnRowClick="CharitySelected">
      <GridColumns>
        <TextGridColumn Field="@nameof(CharityDisplay.Name)" Width="300px" />
        <TextGridColumn Field="@nameof(CharityDisplay.Number)" Width="200px" />
      </GridColumns>
    </TelerikGrid>
  </WindowContent>
</TelerikWindow>

@foreach (CharityDisplay c in _charityWindows) {
  <TelerikWindow Visible="c.Visible" ThemeColor="@ThemeConstants.Window.ThemeColor.Dark">
    <WindowActions>
      <WindowAction Name="Close" OnClick="@(() => _charityWindows.Remove(c))" />
    </WindowActions>
    <WindowTitle><span class="@IconsHelper.HandHoldingHeart me-1"></span> @c.Name</WindowTitle>
    <WindowContent>
      <table>
        <tr>
          <th>Number</th>
          <td>@c.Number</td>
        </tr>
        <tr>
          <th>Address</th>
          <td>@c.Address</td>
        </tr>
        <tr>
          <th>City</th>
          <td>@c.City</td>
        </tr>
        <tr>
          <th>Postcode</th>
          <td>@c.Postcode</td>
        </tr>
      </table>
    </WindowContent>
  </TelerikWindow>
}

@code {

  #region Customers

  private bool _customerListWindowVisible;

  private readonly ObservableCollection<CustomerDisplay> _customers = Customers
    .Select(c => new CustomerDisplay(c.Id, c.FirstName, c.Surname, c.Email, c.Address, c.City, c.Postcode))
    .OrderBy(c => c.Surname)
    .ThenBy(c => c.FirstName)
    .ToObservableCollection();

  private readonly ObservableCollection<CustomerDisplay> _customerWindows = new();

  private async Task CustomerSelected(GridRowClickEventArgs args) {
    CustomerDisplay customer = args.Item as CustomerDisplay ?? new(-1, "", "", "", "", "", "");
    await Task.Delay(100);
    if (_customerWindows.All(c => c.Id != customer.Id)) {
      _customerWindows.Add(customer);
      // Get customer detail from the database
    } else {
      customer.Visible = false;
    }
    customer.Visible = true;
  }

  #endregion

  #region Charities

  private bool _charityListWindowVisible;

  private readonly ObservableCollection<CharityDisplay> _charities = Charities
    .Select(c => new CharityDisplay(c.Id, c.Name, c.Number, c.Address, c.City, c.Postcode))
    .OrderBy(c => c.Name)
    .ToObservableCollection();

  private readonly ObservableCollection<CharityDisplay> _charityWindows = new();

  private async Task CharitySelected(GridRowClickEventArgs args) {
    CharityDisplay charity = args.Item as CharityDisplay ?? new(-1, "", "", "", "", "");
    if (_charityWindows.All(c => c.Id != charity.Id)) {
      _charityWindows.Add(charity);
    }
    charity.Visible = false;
    // Get charity detail from the database
    await Task.Delay(100);
    charity.Visible = true;
  }

  #endregion

}