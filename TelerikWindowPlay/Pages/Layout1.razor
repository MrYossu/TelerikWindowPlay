@page "/1"

<!-- TODO AYS - Avoid memory leaks: https://blazor-university.com/javascript-interop/calling-dotnet-from-javascript/lifetimes-and-memory-leaks/ -->

<PageTitle>Layout 1</PageTitle>

<TelerikToolBar Adaptive="false">
  <ToolBarButton OnClick="@ShowCustomerList">
    <span class="@IconsHelper.Users me-1"></span> Customers
  </ToolBarButton>
  <ToolBarButton OnClick="@(async () => { _charityListWindowVisible = false; await Task.Delay(1); _charityListWindowVisible = true; })">
    <span class="@IconsHelper.HandHoldingHeart me-1"></span> Charities
  </ToolBarButton>
</TelerikToolBar>

<TelerikWindow Visible="@_customerListWindowVisible" Width="450px" ThemeColor="@ThemeConstants.Window.ThemeColor.Primary" >
  <WindowActions>
    <WindowAction Name="Close" OnClick="@HideCustomerList" />
  </WindowActions>
  <WindowTitle>Customers</WindowTitle>
  <WindowContent>
    <TelerikGrid Data="@_customers"
                 Pageable="true"
                 PageSize="15"
                 OnRowClick="CustomerSelected">
      <GridColumns>
        <TextGridColumn Field="@nameof(CustomerDisplay.FirstName)" Width="200px" />
        <TextGridColumn Field="@nameof(CustomerDisplay.Surname)" Width="200px" />
      </GridColumns>
    </TelerikGrid>
  </WindowContent>
</TelerikWindow>

@foreach (CustomerDisplay c in _customerWindows.Where(c => c.Visible)) {
  <TelerikWindow Visible="true" ThemeColor="@ThemeConstants.Window.ThemeColor.Primary" @bind-Top="@c.TopStr" @bind-Left="@c.LeftStr" Class="@($"customer-window-{c.Id}")">
    <WindowActions>
      <WindowAction Name="Close" OnClick="@(() => _customerWindows.Remove(c))" />
    </WindowActions>
    <WindowTitle><span class="@IconsHelper.Users me-1"></span> @c.FirstName @c.Surname (@c.Id)</WindowTitle>
    <WindowContent>
      <table>
        <tr>
          <th>Email</th>
          <td>@c.Email</td>
        </tr>
        <tr>
          <th>Address</th>
          <td>@c.Address</td>
        </tr>
        <tr>
          <th>City</th>
          <td>@c.City</td>
        </tr>
        <tr>
          <th>Postcode</th>
          <td>@c.Postcode</td>
        </tr>
      </table>
    </WindowContent>
  </TelerikWindow>
}

<TelerikWindow Visible="@_charityListWindowVisible" Width="550px" ThemeColor="@ThemeConstants.Window.ThemeColor.Dark" >
  <WindowActions>
    <WindowAction Name="Close" OnClick="@(() => _charityListWindowVisible = false)" />
  </WindowActions>
  <WindowTitle>Charities</WindowTitle>
  <WindowContent>
    <TelerikGrid Data="@_charities"
                 Pageable="true"
                 PageSize="15"
                 OnRowClick="CharitySelected">
      <GridColumns>
        <TextGridColumn Field="@nameof(CharityDisplay.Name)" Width="300px" />
        <TextGridColumn Field="@nameof(CharityDisplay.Number)" Width="200px" />
      </GridColumns>
    </TelerikGrid>
  </WindowContent>
</TelerikWindow>

@foreach (CharityDisplay c in _charityWindows) {
  <TelerikWindow Visible="c.Visible" ThemeColor="@ThemeConstants.Window.ThemeColor.Dark">
    <WindowActions>
      <WindowAction Name="Close" OnClick="@(() => _charityWindows.Remove(c))" />
    </WindowActions>
    <WindowTitle><span class="@IconsHelper.HandHoldingHeart me-1"></span> @c.Name</WindowTitle>
    <WindowContent>
      <table>
        <tr>
          <th>Number</th>
          <td>@c.Number</td>
        </tr>
        <tr>
          <th>Address</th>
          <td>@c.Address</td>
        </tr>
        <tr>
          <th>City</th>
          <td>@c.City</td>
        </tr>
        <tr>
          <th>Postcode</th>
          <td>@c.Postcode</td>
        </tr>
      </table>
    </WindowContent>
  </TelerikWindow>
}